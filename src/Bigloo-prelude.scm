(module test)
(define current-second
  current-seconds)
(define (jiffies-per-second) 1000000000)
(define (current-jiffy)
  (llong->flonum (current-nanoseconds)))
(define (this-scheme-implementation-name)
  (string-append "bigloo-" (bigloo-config 'release-number)))
(define inexact exact->inexact)
(define exact inexact->exact)
(define call-with-current-continuation call/cc)
(define (error . args) args)
(define (exact-integer? v)
  (and (integer? v) (exact? v)))
(define (make-bytevector n) (make-u8vector n))
(define (bytevector-u8-set! vec i x)
  (u8vector-set! vec i (if (integer? x) (fixnum->uint8 x) x)))
(define (string->utf8 s)
  (let* ((n (string-length s))
         (v (make-u8vector n)))
    (let iter ((pos 0))
      (when (< pos n)
        (u8vector-set! v pos (fixnum->uint8 (char->integer (string-ref s pos))))
        (iter (+ pos 1))))
    v))
(define (utf8->string v)
  (let* ((l (u8vector->list v))
         (s (make-string (u8vector-length v)))
         (pos 0))
    (for-each (lambda (code)
                (string-set! s pos (integer->char (uint8->fixnum code)))
                (set! pos (+ pos 1)))
              l)
    s))
#;
